Day to day evaluation of Scala learning

Day 1
1. What is scala, why scala
2. What is SBT, why SBT

Day 2
1. Installing sbt in windows
2. Running hello world

Day 3
1. Conditional statements
2. Looping statements

Day 4
1. reading from user and manipulating
2. loops in depth
3. String modifiers

Day 5
1. New keyword match
Match is an expression like switch
i match {
    case 1  => println("January")
    case 2  => println("February")
    case 3  => println("March")
    case 4  => println("April")
    case 5  => println("May")
    case 6  => println("June")
    case 7  => println("July")
    case 8  => println("August")
    case 9  => println("September")
    case 10 => println("October")
    case 11 => println("November")
    case 12 => println("December")
    // catch the default with a variable so you can print it
    case _  => println("Invalid month")
}

_ case, which is the catch-all, default case.

ex2:->

import scala.io.StdIn.readInt
object Day8
{
  private def convertBooleanToStringMessage(bool: Boolean): String = bool match {
    case true => "you said true"
    case false => "you said false"
  }
  def main(args: Array[String]):Unit=
  {
    val result = Day8.convertBooleanToStringMessage(true)
    println(result)
    println("Enter your option \n1. Addition \n2. Subtraction \n3.Multiplication")
    val opt = readInt()
    opt match
    {
      case 1 =>
      {
        val a = readInt()
        val b = readInt()
        val sum = a+b
        println(sum)
      }
      case 2 =>
      {
        val a = readInt()
        val b = readInt()
        val dif = a-b
        println(dif)
      }
      case 3 =>
      {
        val a = readInt()
        val b = readInt()
        val mul = a*b
        println(mul)
      }
      case _ =>println("Default case executed")
    }
  }
}

ex 3:->

import scala.io.StdIn.readInt
object Day8
{
  def convertBooleanToStringMessage(bool: Boolean): String = bool match {
    case true => "you said true"
    case false => "you said false"
  }
  def cBTSM():Int =
    {
      return 8
    }
  def main(args: Array[String]):Unit=
  {
    val result = convertBooleanToStringMessage(true)
    println(result)
    println(cBTSM())
    println("Enter your option \n1. Addition \n2. Subtraction \n3. Multiplication")
    val opt = readInt()
    opt match
    {
      case 1 =>
      {
        val a = readInt()
        val b = readInt()
        val sum = a+b
        println(sum)
      }
      case 2 =>
      {
        val a = readInt()
        val b = readInt()
        val dif = a-b
        println(dif)
      }
      case 3 =>
      {
        val a = readInt()
        val b = readInt()
        val mul = a*b
        println(mul)
      }
      case _ =>println("Default case executed")
    }
  }
}

Day 6

->
.sc vs .scala

A .scala file is a regular Scala file, in order to be compiled and ran as a regular program. This is the most common scala file that you will use

An .sc file is a worksheet or a scratch, it is a file that will be evaluated as you save, the result for each expression is shown in a column to the right of your IDE. Worksheets are like a REPL session. It is useful to test some code in a quick way, just as you can do run the REPL

The file extensions ".sc" and ".scala" both indicate Scala source code files, but they are used in different contexts.

1. **.sc Files**: The ".sc" extension is typically used for Scala script files. Scala scripts are used for scripting purposes and are often used for quick testing and experimentation. Unlike standard Scala code, which is usually compiled before execution, Scala scripts are executed directly, similar to interpreted scripts in other programming languages.

Scala scripts can be executed directly from the command line using the `scala` interpreter, which allows you to run Scala code without having to compile it into bytecode first. To execute a Scala script named "myscript.sc," you can run the following command:

```
scala myscript.sc
```

2. **.scala Files**: The ".scala" extension is the standard file extension for Scala source code files. These files contain Scala code, and they need to be compiled into bytecode before execution. Scala is a statically typed language, and the compiler checks the type safety of your code and generates bytecode for the Java Virtual Machine (JVM) to run.

To compile a ".scala" file, you use the Scala compiler (scalac). For example, to compile "myscript.scala," you can run:

```
scalac myscript.scala
```

After successful compilation, a corresponding ".class" file will be generated, and you can run the Scala code using the `scala` command:

```
scala myscript
```

In summary, ".sc" files are used for Scala scripts and are interpreted directly by the Scala interpreter, while ".scala" files are used for standard Scala source code that needs to be compiled into bytecode before execution on the JVM.

->
Is scala object oriented or functional

scala is a pure object oriented and has the ability to create functions that are sometimes in the format of a method, scala can be called as pure oop as the oop conecpts like
no primitive data 

-> parameters in scala are immutable

Topics in scala 
Introduction
Basics
Unified Types
Classes
Default Parameter Values
Named Arguments
Traits
Tuples
Class Composition with Mixins
Higher-order Functions
Nested Methods
Multiple Parameter Lists
Case Classes
Pattern Matching
Singleton Objects
Regular Expression Patterns
Extractor Objects
For Comprehensions
Generic Classes
Variances
Upper Type Bounds
Lower Type Bounds
Inner Classes
Abstract Type Members
Intersection Types, aka Compound Types
Self-type
Contextual Parameters, aka Implicit Parameters
Implicit Conversions
Polymorphic Methods
Type Inference
Operators
By-name Parameters
Annotations
Packages and Imports
Top Level Definitions in Packages

07/08/2023